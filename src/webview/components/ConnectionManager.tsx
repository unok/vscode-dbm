import React, { useState, useCallback } from 'react'
import { useVSCodeAPI } from '../api/vscode'
import type { ConnectionInfo } from '../../shared/types/messages'

interface ConnectionManagerProps {
  connections: ConnectionInfo[]
  activeConnectionId?: string
  onConnectionSelect: (connectionId: string) => void
  onConnectionCreate: () => void
  onConnectionEdit: (connectionId: string) => void
  onConnectionDelete: (connectionId: string) => void
  onConnectionTest: (connectionId: string) => void
}

export const ConnectionManager: React.FC<ConnectionManagerProps> = ({
  connections,
  activeConnectionId,
  onConnectionSelect,
  onConnectionCreate,
  onConnectionEdit,
  onConnectionDelete,
  onConnectionTest
}) => {
  const [isExpanded, setIsExpanded] = useState(true)

  return (
    <div className='connection-manager'>
      <div className='connection-manager-header'>
        <div className='flex items-center justify-between'>
          <h3 className='text-sm font-semibold text-gray-300 flex items-center gap-2'>
            <button
              onClick={() => setIsExpanded(!isExpanded)}
              className='hover:bg-gray-700 p-1 rounded'
            >
              <ChevronIcon expanded={isExpanded} />
            </button>
            Connections ({connections.length})
          </h3>
          <button
            onClick={onConnectionCreate}
            className='btn-primary text-xs px-2 py-1'
            title='Add new connection'
          >
            <PlusIcon />
          </button>
        </div>
      </div>

      {isExpanded && (
        <div className='connection-list'>
          {connections.length === 0 ? (
            <div className='connection-empty-state'>
              <p className='text-gray-400 text-sm p-4 text-center'>
                No database connections configured.
              </p>
              <button
                onClick={onConnectionCreate}
                className='btn-primary mx-4 mb-4'
              >
                Add First Connection
              </button>
            </div>
          ) : (
            connections.map(connection => (
              <ConnectionItem
                key={connection.id}
                connection={connection}
                isActive={activeConnectionId === connection.id}
                onSelect={() => onConnectionSelect(connection.id)}
                onEdit={() => onConnectionEdit(connection.id)}
                onDelete={() => onConnectionDelete(connection.id)}
                onTest={() => onConnectionTest(connection.id)}
              />
            ))
          )}
        </div>
      )}
    </div>
  )
}

interface ConnectionItemProps {
  connection: ConnectionInfo
  isActive: boolean
  onSelect: () => void
  onEdit: () => void
  onDelete: () => void
  onTest: () => void
}

const ConnectionItem: React.FC<ConnectionItemProps> = ({
  connection,
  isActive,
  onSelect,
  onEdit,
  onDelete,
  onTest
}) => {
  const [showActions, setShowActions] = useState(false)

  const handleDoubleClick = useCallback(() => {
    if (!connection.isConnected) {
      onSelect()
    }
  }, [connection.isConnected, onSelect])

  return (
    <div
      className={`connection-item ${isActive ? 'active' : ''}`}
      onMouseEnter={() => setShowActions(true)}
      onMouseLeave={() => setShowActions(false)}
      onDoubleClick={handleDoubleClick}
    >
      <div className='connection-info' onClick={onSelect}>
        <div className='connection-status'>
          <ConnectionStatusIcon
            type={connection.type}
            isConnected={connection.isConnected}
          />
        </div>

        <div className='connection-details'>
          <div className='connection-name'>
            {connection.name}
          </div>
          <div className='connection-description'>
            {connection.host}:{connection.port}/{connection.database}
          </div>
        </div>

        <div className='connection-state'>
          {connection.isConnected ? (
            <span className='text-green-400 text-xs'>Connected</span>
          ) : (
            <span className='text-gray-400 text-xs'>Disconnected</span>
          )}
        </div>
      </div>

      {showActions && (
        <div className='connection-actions'>
          <button
            onClick={onTest}
            className='connection-action-button'
            title='Test connection'
          >
            <TestIcon />
          </button>
          <button
            onClick={onEdit}
            className='connection-action-button'
            title='Edit connection'
          >
            <EditIcon />
          </button>
          <button
            onClick={onDelete}
            className='connection-action-button text-red-400 hover:text-red-300'
            title='Delete connection'
          >
            <DeleteIcon />
          </button>
        </div>
      )}
    </div>
  )
}

// Connection creation/edit modal
interface ConnectionFormProps {
  connection?: Partial<ConnectionInfo>
  isOpen: boolean
  onClose: () => void
  onSave: (connection: Partial<ConnectionInfo>) => void
}

export const ConnectionForm: React.FC<ConnectionFormProps> = ({
  connection,
  isOpen,
  onClose,
  onSave
}) => {
  const [formData, setFormData] = useState({
    name: connection?.name || '',
    type: connection?.type || 'mysql' as const,
    host: connection?.host || 'localhost',
    port: connection?.port || 3306,
    database: connection?.database || '',
    username: connection?.username || '',
    password: '',
    ssl: false
  })

  const vscodeApi = useVSCodeAPI()

  const handleSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }, [formData, onSave])

  const handleTestConnection = useCallback(async () => {
    try {
      vscodeApi.showInfo('Testing connection...')
      const result = await vscodeApi.openConnection(formData)
      if (result.success) {
        vscodeApi.showInfo('Connection successful!')
      } else {
        vscodeApi.showError(`Connection failed: ${result.error}`)
      }
    } catch (error) {
      vscodeApi.showError(`Connection test failed: ${error}`)
    }
  }, [formData, vscodeApi])

  if (!isOpen) return null

  return (
    <div className='connection-form-overlay'>
      <div className='connection-form-modal'>
        <div className='connection-form-header'>
          <h2 className='text-lg font-semibold'>
            {connection ? 'Edit Connection' : 'New Connection'}
          </h2>
          <button onClick={onClose} className='connection-form-close'>
            <CloseIcon />
          </button>
        </div>

        <form onSubmit={handleSubmit} className='connection-form'>
          <div className='form-group'>
            <label htmlFor='name'>Connection Name</label>
            <input
              id='name'
              type='text'
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              className='input-field'
              required
            />
          </div>

          <div className='form-group'>
            <label htmlFor='type'>Database Type</label>
            <select
              id='type'
              value={formData.type}
              onChange={(e) => setFormData(prev => ({ 
                ...prev, 
                type: e.target.value as 'mysql' | 'postgresql' | 'sqlite',
                port: e.target.value === 'mysql' ? 3306 : 
                      e.target.value === 'postgresql' ? 5432 : 0
              }))}
              className='input-field'
            >
              <option value='mysql'>MySQL</option>
              <option value='postgresql'>PostgreSQL</option>
              <option value='sqlite'>SQLite</option>
            </select>
          </div>

          {formData.type !== 'sqlite' && (
            <>
              <div className='form-group'>
                <label htmlFor='host'>Host</label>
                <input
                  id='host'
                  type='text'
                  value={formData.host}
                  onChange={(e) => setFormData(prev => ({ ...prev, host: e.target.value }))}
                  className='input-field'
                  required
                />
              </div>

              <div className='form-group'>
                <label htmlFor='port'>Port</label>
                <input
                  id='port'
                  type='number'
                  value={formData.port}
                  onChange={(e) => setFormData(prev => ({ ...prev, port: parseInt(e.target.value) }))}
                  className='input-field'
                  required
                />
              </div>

              <div className='form-group'>
                <label htmlFor='username'>Username</label>
                <input
                  id='username'
                  type='text'
                  value={formData.username}
                  onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}
                  className='input-field'
                  required
                />
              </div>

              <div className='form-group'>
                <label htmlFor='password'>Password</label>
                <input
                  id='password'
                  type='password'
                  value={formData.password}
                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
                  className='input-field'
                />
              </div>
            </>
          )}

          <div className='form-group'>
            <label htmlFor='database'>Database Name</label>
            <input
              id='database'
              type='text'
              value={formData.database}
              onChange={(e) => setFormData(prev => ({ ...prev, database: e.target.value }))}
              className='input-field'
              required
            />
          </div>

          <div className='connection-form-actions'>
            <button
              type='button'
              onClick={handleTestConnection}
              className='btn-secondary'
            >
              Test Connection
            </button>
            <div className='flex gap-2'>
              <button
                type='button'
                onClick={onClose}
                className='btn-secondary'
              >
                Cancel
              </button>
              <button
                type='submit'
                className='btn-primary'
              >
                Save
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  )
}

// Icon components
const ChevronIcon: React.FC<{ expanded: boolean }> = ({ expanded }) => (
  <svg
    className={`w-3 h-3 transition-transform duration-200 ${expanded ? 'rotate-90' : ''}`}
    fill='currentColor'
    viewBox='0 0 20 20'
  >
    <path
      fillRule='evenodd'
      d='M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z'
      clipRule='evenodd'
    />
  </svg>
)

const PlusIcon: React.FC = () => (
  <svg className='w-3 h-3' fill='currentColor' viewBox='0 0 20 20'>
    <path fillRule='evenodd' d='M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z' clipRule='evenodd' />
  </svg>
)

const TestIcon: React.FC = () => (
  <svg className='w-3 h-3' fill='currentColor' viewBox='0 0 20 20'>
    <path fillRule='evenodd' d='M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z' clipRule='evenodd' />
  </svg>
)

const EditIcon: React.FC = () => (
  <svg className='w-3 h-3' fill='currentColor' viewBox='0 0 20 20'>
    <path d='M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z' />
  </svg>
)

const DeleteIcon: React.FC = () => (
  <svg className='w-3 h-3' fill='currentColor' viewBox='0 0 20 20'>
    <path fillRule='evenodd' d='M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z' clipRule='evenodd' />
  </svg>
)

const CloseIcon: React.FC = () => (
  <svg className='w-4 h-4' fill='currentColor' viewBox='0 0 20 20'>
    <path fillRule='evenodd' d='M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z' clipRule='evenodd' />
  </svg>
)

const ConnectionStatusIcon: React.FC<{ type: 'mysql' | 'postgresql' | 'sqlite', isConnected: boolean }> = ({ type, isConnected }) => {
  const statusColor = isConnected ? 'text-green-400' : 'text-gray-400'
  
  const icons = {
    mysql: (
      <svg className={`w-4 h-4 ${statusColor}`} viewBox='0 0 24 24' fill='currentColor'>
        <path d='M16.405 5.501c-.115 0-.193.014-.274.033v.013h.014c.054.104.146.18.214.274.054.107.146.221.194.334l.013-.014c.067-.046.106-.167.106-.334-.03-.054-.046-.106-.1-.154-.05-.035-.08-.094-.14-.107-.013-.014-.014-.014-.027-.014zm4.918 2.642c-.243 0-.414.14-.534.274-.133.16-.214.374-.274.567-.054.2-.067.394-.08.594v.174c-.014.2-.027.414-.067.594-.05.174-.133.334-.214.474-.094.154-.2.274-.334.394-.134.107-.274.2-.427.274-.16.067-.334.094-.507.094-.174 0-.334-.027-.474-.094-.14-.067-.274-.16-.394-.274-.12-.12-.214-.254-.274-.414-.067-.16-.1-.334-.1-.507 0-.174.033-.334.1-.474.067-.14.16-.274.274-.374.12-.107.254-.2.414-.274.16-.067.334-.094.507-.094.174 0 .334.027.474.094.14.067.274.16.394.274.12.12.214.254.274.414.067.16.1.334.1.507 0 .174-.033.334-.1.474-.067.14-.16.274-.274.374-.12.107-.254.2-.414.274-.16.067-.334.094-.507.094-.174 0-.334-.027-.474-.094-.14-.067-.274-.16-.394-.274-.12-.12-.214-.254-.274-.414-.067-.16-.1-.334-.1-.507s.033-.334.1-.474c.067-.14.16-.274.274-.374.12-.107.254-.2.414-.274.16-.067.334-.094.507-.094z'/>
      </svg>
    ),
    postgresql: (
      <svg className={`w-4 h-4 ${statusColor}`} viewBox='0 0 24 24' fill='currentColor'>
        <path d='M23.111 5.441c-.102-.433-.214-.84-.367-1.226-.153-.387-.346-.754-.58-1.1-.234-.347-.508-.674-.823-.98-.315-.307-.67-.593-1.066-.86-.396-.266-.832-.512-1.308-.737-.476-.226-.992-.431-1.548-.616-.556-.184-1.152-.348-1.788-.491-.636-.144-1.312-.267-2.028-.37-.716-.102-1.472-.184-2.268-.246-.796-.061-1.632-.102-2.508-.123-.876-.02-1.792-.02-2.748 0-.956.021-1.952.082-2.988.184-1.036.102-2.112.245-3.228.43-1.116.184-2.272.409-3.468.674-1.196.266-2.432.572-3.708.92-1.276.347-2.592.735-3.948 1.164-.68.215-1.369.441-2.068.678-.699.238-1.408.487-2.127.748-.719.26-1.448.532-2.187.815-.739.284-1.488.579-2.247.886-.759.306-1.528.624-2.307.953-.779.33-1.568.671-2.367 1.024-.4.176-.801.357-1.203.542-.402.186-.805.376-1.209.571-.404.195-.809.395-1.215.599-.406.205-.813.414-1.221.628-.408.214-.817.433-1.227.656-.41.224-.821.452-1.233.686-.206.117-.412.236-.619.357-.207.122-.414.246-.622.372-.208.127-.416.256-.625.388-.209.132-.418.266-.628.403-.21.137-.42.277-.631.42-.211.143-.422.289-.634.438-.212.149-.424.301-.637.456-.213.155-.426.313-.64.474-.214.161-.428.325-.643.492-.215.167-.431.337-.647.51-.216.173-.432.349-.649.528-.217.179-.434.361-.651.546-.217.185-.434.373-.652.564-.218.191-.436.385-.655.582-.219.197-.438.397-.657.6-.219.203-.438.409-.658.618-.22.209-.44.421-.661.636-.221.215-.442.433-.664.654-.222.221-.444.445-.667.672-.223.227-.446.457-.67.69-.224.233-.448.469-.673.708-.225.239-.45.481-.676.726-.226.245-.452.493-.679.744-.227.251-.454.505-.682.762-.228.257-.456.517-.685.78-.229.263-.458.529-.688.798-.23.269-.46.541-.691.816-.231.275-.462.553-.694.834-.232.281-.464.565-.697.852-.233.287-.466.577-.7.87-.234.293-.468.589-.703.888-.235.299-.47.601-.706.906-.236.305-.472.613-.709.924-.237.311-.474.625-.712.942-.238.317-.476.637-.715.96-.239.323-.478.649-.718.978-.24.329-.48.661-.721.996-.241.335-.482.673-.724 1.014-.242.341-.484.685-.727 1.032-.243.347-.486.697-.73 1.05-.244.353-.488.709-.733 1.068-.245.359-.49.721-.736 1.086-.246.365-.492.733-.739 1.104-.247.371-.494.745-.742 1.122-.248.377-.496.757-.745 1.14-.249.383-.498.769-.748 1.158-.25.389-.5.781-.751 1.176-.251.395-.502.793-.754 1.194-.252.401-.504.805-.757 1.212-.253.407-.506.817-.76 1.23-.254.413-.508.829-.763 1.248-.255.419-.51.841-.766 1.266-.256.425-.512.853-.769 1.284-.257.431-.514.865-.772 1.302-.258.437-.516.877-.775 1.32-.259.443-.518.889-.778 1.338-.26.449-.52.901-.781 1.356-.261.455-.522.913-.784 1.374-.262.461-.524.925-.787 1.392-.263.467-.526.937-.79 1.41-.264.473-.528.949-.793 1.428-.265.479-.53 1.001-.796 1.506-.266.505-.532 1.013-.799 1.524-.267.511-.534 1.025-.802 1.542-.268.517-.536 1.037-.805 1.56-.269.523-.538 1.049-.808 1.578-.27.529-.54 1.061-.811 1.596-.271.535-.542 1.073-.814 1.614-.272.541-.544 1.085-.817 1.632-.273.547-.546 1.097-.82 1.65-.274.553-.548 1.109-.823 1.668-.275.559-.55 1.121-.826 1.686-.276.565-.552 1.133-.829 1.704-.277.571-.554 1.145-.832 1.722-.278.577-.556 1.157-.835 1.74-.279.583-.558 1.169-.838 1.758-.28.589-.56 1.181-.841 1.776-.281.595-.562 1.193-.844 1.794-.282.601-.564 1.205-.847 1.812-.283.607-.566 1.217-.85 1.83-.284.613-.568 1.229-.853 1.848-.285.619-.57 1.241-.856 1.866-.286.625-.572 1.253-.859 1.884-.287.631-.574 1.265-.862 1.902-.288.637-.576 1.277-.865 1.92-.289.643-.578 1.289-.868 1.938-.29.649-.58 1.301-.871 1.956-.291.655-.582 1.313-.874 1.974-.292.661-.584 1.325-.877 1.992-.293.667-.586 1.337-.88 2.01-.294.673-.588 1.349-.883 2.028-.295.679-.59 1.361-.886 2.046-.296.685-.592 1.373-.889 2.064-.297.691-.594 1.385-.892 2.082-.298.697-.596 1.397-.895 2.1-.299.703-.598 1.409-.898 2.118-.3.709-.6 1.421-.901 2.136-.301.715-.602 1.433-.904 2.154-.302.721-.604 1.445-.907 2.172-.303.727-.606 1.457-.91 2.19-.304.733-.608 1.469-.913 2.208-.305.739-.61 1.481-.916 2.226-.306.745-.612 1.493-.919 2.244-.307.751-.614 1.505-.922 2.262-.308.757-.616 1.517-.925 2.28-.309.763-.618 1.529-.928 2.298-.31.769-.62 1.541-.931 2.316-.311.775-.622 1.553-.934 2.334-.312.781-.624 1.565-.937 2.352-.313.787-.626 1.577-.94 2.37-.314.793-.628 1.589-.943 2.388-.315.799-.63 1.601-.946 2.406-.316.805-.632 1.613-.949 2.424-.317.811-.634 1.625-.952 2.442-.318.817-.636 1.637-.955 2.46-.319.823-.638 1.649-.958 2.478-.32.829-.64 1.661-.961 2.496-.321.835-.642 1.673-.964 2.514-.322.841-.644 1.685-.967 2.532-.323.847-.646 1.697-.97 2.55-.324.853-.648 1.709-.973 2.568-.325.859-.65 1.721-.976 2.586-.326.865-.652 1.733-.979 2.604-.327.871-.654 1.745-.982 2.622-.328.877-.656 1.757-.985 2.64-.329.883-.658 1.769-.988 2.658-.33.889-.66 1.781-.991 2.676-.331.895-.662 1.793-.994 2.694-.332.901-.664 1.805-.997 2.712-.333.907-.666 1.817-1 2.73-.334.913-.668 1.829-1.003 2.748-.335.919-.67 1.841-1.006 2.766-.336.925-.672 1.853-1.009 2.784-.337.931-.674 1.865-1.012 2.802-.338.937-.676 1.877-1.015 2.82-.339.943-.678 1.889-1.018 2.838-.34.949-.68 1.901-1.021 2.856-.341.955-.682 1.913-1.024 2.874-.342.961-.684 1.925-1.027 2.892-.343.967-.686 1.937-1.03 2.91-.344.973-.688 1.949-1.033 2.928-.345.979-.69 1.961-1.036 2.946-.346.985-.692 1.973-1.039 2.964-.347.991-.694 1.985-1.042 2.982-.348.997-.696 1.997-1.045 3--.349 1.003-.698 2.009-1.048 3.018-.35 1.009-.7 2.021-1.051 3.036-.351 1.015-.702 2.033-1.054 3.054-.352 1.021-.704 2.045-1.057 3.072-.353 1.027-.706 2.057-1.06 3.09-.354 1.033-.708 2.069-1.063 3.108-.355 1.039-.71 2.081-1.066 3.126-.356 1.045-.712 2.093-1.069 3.144-.357 1.051-.714 2.105-1.072 3.162-.358 1.057-.716 2.117-1.075 3.18-.359 1.063-.718 2.129-1.078 3.198-.36 1.069-.72 2.141-1.081 3.216-.361 1.075-.722 2.153-1.084 3.234-.362 1.081-.724 2.165-1.087 3.252-.363 1.087-.726 2.177-1.09 3.27-.364 1.093-.728 2.189-1.093 3.288-.365 1.099-.73 2.201-1.096 3.306-.366 1.105-.732 2.213-1.099 3.324-.367 1.111-.734 2.225-1.102 3.342-.368 1.117-.736 2.237-1.105 3.36-.369 1.123-.738 2.249-1.108 3.378-.37 1.129-.74 2.261-1.111 3.396-.371 1.135-.742 2.273-1.114 3.414-.372 1.141-.744 2.285-1.117 3.432-.373 1.147-.746 2.297-1.12 3.45-.374 1.153-.748 2.309-1.123 3.468-.375 1.159-.75 2.321-1.126 3.486-.376 1.165-.752 2.333-1.129 3.504-.377 1.171-.754 2.345-1.132 3.522-.378 1.177-.756 2.357-1.135 3.54-.379 1.183-.758 2.369-1.138 3.558-.38 1.189-.76 2.381-1.141 3.576-.381 1.195-.762 2.393-1.144 3.594-.382 1.201-.764 2.405-1.147 3.612-.383 1.207-.766 2.417-1.15 3.63-.384 1.213-.768 2.429-1.153 3.648-.385 1.219-.77 2.441-1.156 3.666-.386 1.225-.772 2.453-1.159 3.684-.387 1.231-.774 2.465-1.162 3.702-.388 1.237-.776 2.477-1.165 3.72-.389 1.243-.778 2.489-1.168 3.738-.39 1.249-.78 2.501-1.171 3.756-.391 1.255-.782 2.513-1.174 3.774-.392 1.261-.784 2.525-1.177 3.792-.393 1.267-.786 2.537-1.18 3.81-.394 1.273-.788 2.549-1.183 3.828-.395 1.279-.79 2.561-1.186 3.846-.396 1.285-.792 2.573-1.189 3.864-.397 1.291-.794 2.585-1.192 3.882-.398 1.297-.796 2.597-1.195 3.9-.399 1.303-.798 2.609-1.198 3.918-.4 1.309-.8 2.621-1.201 3.936-.401 1.315-.802 2.633-1.204 3.954-.402 1.321-.804 2.645-1.207 3.972-.403 1.327-.806 2.657-1.21 3.99-.404 1.333-.808 2.669-1.213 4.008-.405 1.339-.81 2.681-1.216 4.026-.406 1.345-.812 2.693-1.219 4.044-.407 1.351-.814 2.705-1.222 4.062-.408 1.357-.816 2.717-1.225 4.08-.409 1.363-.818 2.729-1.228 4.098-.41 1.369-.82 2.741-1.231 4.116-.411 1.375-.822 2.753-1.234 4.134-.412 1.381-.824 2.765-1.237 4.152-.413 1.387-.826 2.777-1.24 4.17-.414 1.393-.828 2.789-1.243 4.188-.415 1.399-.83 2.801-1.246 4.206-.416 1.405-.832 2.813-1.249 4.224-.417 1.411-.834 2.825-1.252 4.242-.418 1.417-.836 2.837-1.255 4.26-.419 1.423-.838 2.849-1.258 4.278-.42 1.429-.84 2.861-1.261 4.296-.421 1.435-.842 2.873-1.264 4.314-.422 1.441-.844 2.885-1.267 4.332-.423 1.447-.846 2.897-1.27 4.35-.424 1.453-.848 2.909-1.273 4.368-.425 1.459-.85 2.921-1.276 4.386-.426 1.465-.852 2.933-1.279 4.404-.427 1.471-.854 2.945-1.282 4.422-.428 1.477-.856 2.957-1.285 4.44-.429 1.483-.858 2.969-1.288 4.458-.43 1.489-.86 2.981-1.291 4.476-.431 1.495-.862 2.993-1.294 4.494-.432 1.501-.864 3.005-1.297 4.512-.433 1.507-.866 3.017-1.3 4.53-.434 1.513-.868 3.029-1.303 4.548-.435 1.519-.87 3.041-1.306 4.566-.436 1.525-.872 3.053-1.309 4.584-.437 1.531-.874 3.065-1.312 4.602-.438 1.537-.876 3.077-1.315 4.62-.439 1.543-.878 3.089-1.318 4.638-.44 1.549-.88 3.101-1.321 4.656-.441 1.555-.882 3.113-1.324 4.674-.442 1.561-.884 3.125-1.327 4.692-.443 1.567-.886 3.137-1.33 4.71-.444 1.573-.888 3.149-1.333 4.728-.445 1.579-.89 3.161-1.336 4.746-.446 1.585-.892 3.173-1.339 4.764-.447 1.591-.894 3.185-1.342 4.782-.448 1.597-.896 3.197-1.345 4.8-.449 1.603-.898 3.209-1.348 4.818-.45 1.609-.9 3.221-1.351 4.836-.451 1.615-.902 3.233-1.354 4.854-.452 1.621-.904 3.245-1.357 4.872-.453 1.627-.906 3.257-1.36 4.89-.454 1.633-.908 3.269-1.363 4.908-.455 1.639-.91 3.281-1.366 4.926-.456 1.645-.912 3.293-1.369 4.944-.457 1.651-.914 3.305-1.372 4.962-.458 1.657-.916 3.317-1.375 4.98-.459 1.663-.918 3.329-1.378 4.998-.46 1.669-.92 3.341-1.381 5.016-.461 1.675-.922 3.353-1.384 5.034-.462 1.681-.924 3.365-1.387 5.052-.463 1.687-.926 3.377-1.39 5.07-.464 1.693-.928 3.389-1.393 5.088-.465 1.699-.93 3.401-1.396 5.116-.466 1.715-.932 3.433-1.399 5.154-.467 1.721-.934 3.445-1.402 5.172-.468 1.727-.936 3.457-1.405 5.19-.469 1.733-.938 3.469-1.408 5.208-.47 1.739-.94 3.481-1.411 5.226-.471 1.745-.942 3.493-1.414 5.244-.472 1.751-.944 3.505-1.417 5.262-.473 1.757-.946 3.517-1.42 5.28-.474 1.763-.948 3.529-1.423 5.298-.475 1.769-.95 3.541-1.426 5.316-.476 1.775-.952 3.553-1.429 5.334-.477 1.781-.954 3.565-1.432 5.352-.478 1.787-.956 3.577-1.435 5.37-.479 1.793-.958 3.589-1.438 5.388-.48 1.799-.96 3.601-1.441 5.406-.481 1.805-.962 3.613-1.444 5.424-.482 1.811-.964 3.625-1.447 5.442-.483 1.817-.966 3.637-1.45 5.46-.484 1.823-.968 3.649-1.453 5.478-.485 1.829-.97 3.661-1.456 5.496-.486 1.835-.972 3.673-1.459 5.514-.487 1.841-.974 3.685-1.462 5.532-.488 1.847-.976 3.697-1.465 5.55-.489 1.853-.978 3.709-1.468 5.568-.49 1.859-.98 3.721-1.471 5.586-.491 1.865-.982 3.733-1.474 5.604-.492 1.871-.984 3.745-1.477 5.622-.493 1.877-.986 3.757-1.48 5.64-.494 1.883-.988 3.769-1.483 5.658-.495 1.889-.99 3.781-1.486 5.676-.496 1.895-.992 3.793-1.489 5.714-.497 1.921-.994 3.845-1.492 5.772-.498 1.927-.996 3.857-1.495 5.79-.499 1.933-.998 3.869-1.498 5.808-.5 1.939-1 3.881-1.501 5.826-.501 1.945-1.002 3.893-1.504 5.844-.502 1.951-1.004 3.905-1.507 5.862-.503 1.957-1.006 3.917-1.51 5.88-.504 1.963-1.008 3.929-1.513 5.898-.505 1.969-1.01 3.941-1.516 5.916-.506 1.975-1.012 3.953-1.519 5.934-.507 1.981-1.014 3.965-1.522 5.952-.508 1.987-1.016 3.977-1.525 5.97-.509 1.993-1.018 3.989-1.528 5.988-.51 1.999-1.02 4.001-1.531 6.016-.511 2.015-1.022 4.033-1.534 6.054-.512 2.021-1.024 4.045-1.537 6.072-.513 2.027-1.026 4.057-1.54 6.09-.514 2.033-1.028 4.069-1.543 6.108-.515 2.039-1.03 4.081-1.546 6.126-.516 2.045-1.032 4.093-1.549 6.144-.517 2.051-1.034 4.105-1.552 6.162-.518 2.057-1.036 4.117-1.555 6.18-.519 2.063-1.038 4.129-1.558 6.198-.52 2.069-1.04 4.141-1.561 6.216-.521 2.075-1.042 4.153-1.564 6.234-.522 2.081-1.044 4.165-1.567 6.252-.523 2.087-1.046 4.177-1.57 6.27-.524 2.093-1.048 4.189-1.573 6.288-.525 2.099-1.05 4.201-1.576 6.316-.526 2.115-1.052 4.233-1.579 6.354-.527 2.121-1.054 4.245-1.582 6.372-.528 2.127-1.056 4.257-1.585 6.39-.529 2.133-1.058 4.269-1.588 6.408-.53 2.139-1.06 4.281-1.591 6.426-.531 2.145-1.062 4.293-1.594 6.444-.532 2.151-1.064 4.305-1.597 6.466-.533 2.161-1.066 4.325-1.6 6.492-.534 2.167-1.068 4.337-1.603 6.51-.535 2.173-1.07 4.349-1.606 6.528-.536 2.179-1.072 4.361-1.609 6.546-.537 2.185-1.074 4.373-1.612 6.564-.538 2.191-1.076 4.385-1.615 6.582-.539 2.197-1.078 4.397-1.618 6.6-.54 2.203-1.08 4.409-1.621 6.618-.541 2.209-1.082 4.421-1.624 6.636-.542 2.215-1.084 4.433-1.627 6.654-.543 2.221-1.086 4.445-1.63 6.672-.544 2.227-1.088 4.457-1.633 6.69-.545 2.233-1.09 4.469-1.636 6.708-.546 2.239-1.092 4.481-1.639 6.726-.547 2.245-1.094 4.493-1.642 6.744-.548 2.251-1.096 4.505-1.645 6.766-.549 2.261-1.098 4.517-1.648 6.772-.55 2.255-1.1 4.513-1.651 6.774-.551 2.261-1.102 4.525-1.654 6.79-.552 2.265-1.104 4.533-1.657 6.804-.553 2.271-1.106 4.545-1.66 6.822-.554 2.277-1.108 4.557-1.663 6.84-.555 2.283-1.11 4.569-1.666 6.858-.556 2.289-1.112 4.581-1.669 6.876-.557 2.295-1.114 4.593-1.672 6.894-.558 2.301-1.116 4.605-1.675 6.912-.559 2.307-1.118 4.617-1.678 6.93-.56 2.313-1.12 4.629-1.681 6.948-.561 2.319-1.122 4.641-1.684 6.966-.562 2.325-1.124 4.653-1.687 6.984-.563 2.331-1.126 4.665-1.69 7.002-.564 2.337-1.128 4.677-1.693 7.02-.565 2.343-1.13 4.689-1.696 7.038-.566 2.349-1.132 4.701-1.699 7.056-.567 2.355-1.134 4.713-1.702 7.074-.568 2.361-1.136 4.725-1.705 7.092-.569 2.367-1.138 4.737-1.708 7.11-.57 2.373-1.14 4.749-1.711 7.128-.571 2.379-1.142 4.761-1.714 7.146-.572 2.385-1.144 4.773-1.717 7.164-.573 2.391-1.146 4.785-1.72 7.182-.574 2.397-1.148 4.797-1.723 7.2-.575 2.403-1.15 4.809-1.726 7.218-.576 2.409-1.152 4.821-1.729 7.236-.577 2.415-1.154 4.833-1.732 7.254-.578 2.421-1.156 4.845-1.735 7.272-.579 2.427-1.158 4.857-1.738 7.29-.58 2.433-1.16 4.869-1.741 7.308-.581 2.439-1.162 4.881-1.744 7.326-.582 2.445-1.164 4.893-1.747 7.344-.583 2.451-1.166 4.905-1.75 7.362-.584 2.457-1.168 4.917-1.753 7.38-.585 2.463-1.17 4.929-1.756 7.398-.586 2.469-1.172 4.941-1.759 7.416-.587 2.475-1.174 4.953-1.762 7.434-.588 2.481-1.176 4.965-1.765 7.452-.589 2.487-1.178 4.977-1.768 7.47-.59 2.493-1.18 4.989-1.771 7.488-.591 2.499-1.182 5.001-1.774 7.506-.592 2.505-1.184 5.013-1.777 7.524-.593 2.511-1.186 5.025-1.78 7.542-.594 2.517-1.188 5.037-1.783 7.56-.595 2.523-1.19 5.049-1.786 7.578-.596 2.529-1.192 5.061-1.789 7.596-.597 2.535-1.194 5.073-1.792 7.614-.598 2.541-1.196 5.085-1.795 7.632-.599 2.547-1.198 5.097-1.798 7.65-.6 2.553-1.2 5.109-1.801 7.668zM12 2.25C8.68 2.25 6.0 4.93 6.0 8.25C6.0 11.57 8.68 14.25 12 14.25C15.32 14.25 18.0 11.57 18.0 8.25C18.0 4.93 15.32 2.25 12 2.25Z"/>
      </svg>
    ),
    sqlite: (
      <svg className={`w-4 h-4 ${statusColor}`} viewBox='0 0 24 24' fill='currentColor'>
        <path d='M21.678 1.344c.904.118 1.603.797 1.724 1.704.057.436.046.87.014 1.306-.064.874-.193 1.738-.385 2.586-.357 1.578-.879 3.117-1.557 4.595-.678 1.477-1.513 2.893-2.497 4.23-.984 1.337-2.116 2.594-3.386 3.752-1.27 1.158-2.678 2.217-4.208 3.16-1.53.943-3.18 1.769-4.929 2.461-1.748.692-3.596 1.25-5.515 1.663-1.918.413-3.907.68-5.939.794-2.032.114-4.106.075-6.195-.124-2.089-.199-4.192-.517-6.283-.955-2.091-.438-4.172-.996-6.219-1.674-2.047-.678-4.062-1.476-6.02-2.394C2.94 19.926 1.077 18.89.415 17.727c-.662-1.163-.524-2.198.414-3.106.938-.908 2.675-1.688 5.211-2.341 2.536-.653 5.871-1.179 10.005-1.578l4.633-.432 4.633-.432z"/>
      </svg>
    )
  }

  return icons[type]
}